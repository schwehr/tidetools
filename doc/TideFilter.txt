TideFilter

The program tideFilter takes files of the timestamp height format, as generated by tideConvert, tideTrim, tideInterp, and applies a low-pass filter of your design.

This is NOT a time-based filter and assumes that the data is evenly spaced, so be sure to run tideResample on your data beforehand.
Contents
 [hide] 

    1 The Tools
    2 Algorithm
        2.1 Command Line Options and Arguments
    3 Method
        3.1 Generating the Filter
        3.2 Applying the Filter
    4 Examples
        4.1 Example Output

[edit] The Tools

    tideConvert - to generate water level in a standard format from recorded data
    tidePlot - to visually check the result and see any significant data gaps
    tideTrim - to remove outliers
    tideFilter - to smooth the data
    tidePeaks - analysis for offsets and scale
    tideResample - interpolates and downsamples (under development and testing) 

[edit] Algorithm

The data is evaluated within a moving window. Each value in the window is weighted (multiplied) according to the filter design. The products are summed. The product-sum is divided by the sum of the weights. The result is tied to the time at the center of the window. The result is NOT reinserted in the input data, but only output.
[edit] Command Line Options and Arguments
Short 	Long 	Type 	Default 	Description
-i 	--input-files 	[path/]filename 	None 	

Which files to process. This option may be used more than once. Command line arguements will be interpreted as input file names. If there is no input specified either as an option or as an argument, STDIN will be used for input. (Path is optional.)
-o 	--outputFile 	[path/]filename 	None 	

The file to write the output to. If no file is specified, the output will go to STDOUT.
-F 	--filterSpec 	FILTERSPECSTR 	'10 10 10 10 10 10 10' 	

The filter specification is a string of values representing 1/2 of the weighting design. The default filter specification of 7 equal values will generate a boxcar filter with a window of 15 datapoints.
-W 	--widthBoxcar 	number 	15 	

width of boxcar filter. Use of this option supercedes the -F --filterSpec option.
-T 	--threshold 	float_value 	0.0 	

A minimum absolute value for smoothing to be applied to a point. This can be used to eliminte jitter.
-v 	--verbose 	flag 	False 	

Run with status output to stderr
-f 	--format-time 	One of:
caris
matlab
UNIXepoch
	caris 	time format for output

caris
    YY/mm/dd HH:MM:SS.sss 
matlab
    YY mm dd HH MM SS.sss 
UNIXepoch
    SSSSSSSS.ss 

[edit] Method

    Generates a filter based on the filter specification
    Applies the filter as a weighted average across a moving window of data. 

[edit] Generating the Filter

The filter specification (option -F) defines one half of the window. For example: a specification of '8 4 3 1' would generate a weighting scheme from '1 3 4 8 4 3 1' with a total width of 7. The weight at a position is calculated as the value of that position divided by the sum of all positions. In this example, it would be
1 	3 	4 	8 	4 	3 	1
1/24 	3/24 	4/24 	8/24 	4/24 	3/24 	1/24
0.0417 	0.125 	0.1667 	0.3333 	0.1667 	0.125 	0.0417
[edit] Applying the Filter

The weighting scheme is applied over the window width to produce a value for the center position of the window, which is output, but not retained for the next iteration of the averaging.

The process is reapplied to the entire data set, one data point at a time.

This method prevents a time-bias because it symetric around each data point. But there is a cost: data is lost at either end of the data set where the window cannot be filled. The loss at either end is equal to one half of the data window.
[edit] Examples

     filterSpec = [9,5,1]  
     design = [1,5,9,5,1]  
     design.sum = 21
     weights = each design element divided by 21 (sum)
     weights = [0.048,0.238,0.429,0.238,0.048]

Example 1:

     datalist = [100,    105,    109,     100,    110    ]
     weights =  [  0.048,  0.238,  0.429,   0.238,  0.048]
     products = [  4.8,   25.0    46.7,    23.8,    4.76 ]
     sum of products = 105 which is the output value.
     

Example 2 (with the same filter design, i.e., weights). The data list has shifted to the next window position. The leftmost element is shifted off. The new value is 1030, a real spike. this new value is going effect the value that is now at the middle of the window.

     datalist = [105,     109,      100,    110,   1030]
     weights =  [  0.048,   0.238,    0.429,  0.238,  0.048]
     products = [  5.00,   25.9,     42.9,   26.2,   49.0]
     sum (and new value for 100 ) = 150

Because of the nature of this little filter design (1,5,9,5,1), the closer the spike is to the center value, the greater the weight applied, and the greater the influence on the data.
[edit] Example Output
The blue line is the raw data (notice the noise). The red line shows the results of apply the default filter, a 13 data point wide boxcar, on the steps resulting from the digital resolution of the tide gauge. (Click on the image to zoom in.)

    Ben
    My talk
    My preferences
    My watchlist
    My contributions
    Log out

    Page
    Discussion

    Read
    Edit
    View history

Navigation

    Main page
    Community portal
    Current events
    Recent changes
    Random page
    Help

Toolbox

    What links here
    Related changes
    Upload file
    Special pages
    Printable version
    Permanent link

